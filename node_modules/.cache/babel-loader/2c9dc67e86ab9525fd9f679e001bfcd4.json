{"remainingRequest":"/Users/dmitri/Documents/Новая папка/Check/node_modules/babel-loader/lib/index.js!/Users/dmitri/Documents/Новая папка/Check/node_modules/eslint-loader/index.js??ref--12-0!/Users/dmitri/Documents/Новая папка/Check/src/components/services/AuthService.js","dependencies":[{"path":"/Users/dmitri/Documents/Новая папка/Check/src/components/services/AuthService.js","mtime":1623509977022},{"path":"/Users/dmitri/Documents/Новая папка/Check/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dmitri/Documents/Новая папка/Check/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/dmitri/Documents/Новая папка/Check/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _classCallCheck from \"/Users/dmitri/Documents/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/Check/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dmitri/Documents/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/Check/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/dmitri/Documents/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/Check/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { ACCESS_TOKEN, LOGIN_PROVIDER } from \"./auth-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport { isEpochTimeExpired } from \"@/utils/helpers\";\nvar AUTH_PARAM_NAME = \"jwt\";\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService(config) {\n    _classCallCheck(this, AuthService);\n\n    _defineProperty(this, \"url\", void 0);\n\n    this.config = config;\n  }\n\n  _createClass(AuthService, [{\n    key: \"clear\",\n    value: function clear() {\n      localStorage.removeItem(ACCESS_TOKEN);\n      localStorage.removeItem(LOGIN_PROVIDER);\n    }\n  }, {\n    key: \"extractTokenFromUrl\",\n    value: function extractTokenFromUrl() {\n      this.url = new URL(window.location.href);\n      return this.url.searchParams.get(AUTH_PARAM_NAME);\n    }\n  }, {\n    key: \"getTokenData\",\n    value: function getTokenData() {\n      if (!this.accessToken) {\n        throw new Error(\"There is no access token available!\");\n      }\n\n      return jwtDecode(this.accessToken);\n    }\n  }, {\n    key: \"removeTokenFromLocation\",\n    value: function removeTokenFromLocation() {\n      if (!this.url.searchParams.has(AUTH_PARAM_NAME)) {\n        return;\n      }\n\n      this.url.searchParams.delete(AUTH_PARAM_NAME);\n      window.history.replaceState(null, \"test\", this.url.toString());\n    }\n  }, {\n    key: \"isJWTTokenValid\",\n    value: function isJWTTokenValid(token) {\n      if (!token) {\n        return false;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        return exp != null;\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"accessToken\",\n    get: function get() {\n      return localStorage.getItem(ACCESS_TOKEN);\n    },\n    set: function set(token) {\n      return localStorage.setItem(ACCESS_TOKEN, token);\n    }\n  }, {\n    key: \"loginProvider\",\n    get: function get() {\n      return localStorage.getItem(LOGIN_PROVIDER);\n    },\n    set: function set(provider) {\n      return localStorage.setItem(LOGIN_PROVIDER, provider);\n    }\n  }, {\n    key: \"expired\",\n    get: function get() {\n      return isEpochTimeExpired(this.getTokenData().exp);\n    }\n  }, {\n    key: \"signed\",\n    get: function get() {\n      return this.accessToken != null;\n    }\n  }]);\n\n  return AuthService;\n}();\n\nvar authService = new AuthService();\nexport { authService };",{"version":3,"sources":["/Users/dmitri/Documents/Новая папка/Check/src/components/services/AuthService.js"],"names":["ACCESS_TOKEN","LOGIN_PROVIDER","jwtDecode","isEpochTimeExpired","AUTH_PARAM_NAME","AuthService","config","localStorage","removeItem","url","URL","window","location","href","searchParams","get","accessToken","Error","has","delete","history","replaceState","toString","token","exp","e","getItem","setItem","provider","getTokenData","authService"],"mappings":";;;;AAAA,SAASA,YAAT,EAAuBC,cAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,IAAMC,eAAe,GAAG,KAAxB;;IAEMC,W;AAGJ,uBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;;;;4BA0BO;AACNC,MAAAA,YAAY,CAACC,UAAb,CAAwBR,YAAxB;AACAO,MAAAA,YAAY,CAACC,UAAb,CAAwBP,cAAxB;AACD;;;0CAEqB;AACpB,WAAKQ,GAAL,GAAW,IAAIC,GAAJ,CAAQC,MAAM,CAACC,QAAP,CAAgBC,IAAxB,CAAX;AACA,aAAO,KAAKJ,GAAL,CAASK,YAAT,CAAsBC,GAAtB,CAA0BX,eAA1B,CAAP;AACD;;;mCAEc;AACb,UAAI,CAAC,KAAKY,WAAV,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,aAAOf,SAAS,CAAC,KAAKc,WAAN,CAAhB;AACD;;;8CAEyB;AACxB,UAAI,CAAC,KAAKP,GAAL,CAASK,YAAT,CAAsBI,GAAtB,CAA0Bd,eAA1B,CAAL,EAAiD;AAC/C;AACD;;AACD,WAAKK,GAAL,CAASK,YAAT,CAAsBK,MAAtB,CAA6Bf,eAA7B;AACAO,MAAAA,MAAM,CAACS,OAAP,CAAeC,YAAf,CAA4B,IAA5B,EAAkC,MAAlC,EAA0C,KAAKZ,GAAL,CAASa,QAAT,EAA1C;AACD;;;oCAEeC,K,EAAO;AACrB,UAAI,CAACA,KAAL,EAAY;AACV,eAAO,KAAP;AACD;;AACD,UAAI;AAAA,yBACcrB,SAAS,CAACqB,KAAD,CADvB;AAAA,YACMC,GADN,cACMA,GADN;;AAEF,eAAOA,GAAG,IAAI,IAAd;AACD,OAHD,CAGE,OAAOC,CAAP,EAAU;AACV,eAAO,KAAP;AACD;AACF;;;wBA5DiB;AAChB,aAAOlB,YAAY,CAACmB,OAAb,CAAqB1B,YAArB,CAAP;AACD,K;sBAEeuB,K,EAAO;AACrB,aAAOhB,YAAY,CAACoB,OAAb,CAAqB3B,YAArB,EAAmCuB,KAAnC,CAAP;AACD;;;wBAEmB;AAClB,aAAOhB,YAAY,CAACmB,OAAb,CAAqBzB,cAArB,CAAP;AACD,K;sBAEiB2B,Q,EAAU;AAC1B,aAAOrB,YAAY,CAACoB,OAAb,CAAqB1B,cAArB,EAAqC2B,QAArC,CAAP;AACD;;;wBAEa;AACZ,aAAOzB,kBAAkB,CAAC,KAAK0B,YAAL,GAAoBL,GAArB,CAAzB;AACD;;;wBAEY;AACX,aAAO,KAAKR,WAAL,IAAoB,IAA3B;AACD;;;;;;AAyCH,IAAMc,WAAW,GAAG,IAAIzB,WAAJ,EAApB;AAEA,SAASyB,WAAT","sourcesContent":["import { ACCESS_TOKEN, LOGIN_PROVIDER } from \"./auth-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport { isEpochTimeExpired } from \"@/utils/helpers\";\n\nconst AUTH_PARAM_NAME = \"jwt\";\n\nclass AuthService {\n  url;\n\n  constructor(config) {\n    this.config = config;\n  }\n\n  get accessToken() {\n    return localStorage.getItem(ACCESS_TOKEN);\n  }\n\n  set accessToken(token) {\n    return localStorage.setItem(ACCESS_TOKEN, token);\n  }\n\n  get loginProvider() {\n    return localStorage.getItem(LOGIN_PROVIDER);\n  }\n\n  set loginProvider(provider) {\n    return localStorage.setItem(LOGIN_PROVIDER, provider);\n  }\n\n  get expired() {\n    return isEpochTimeExpired(this.getTokenData().exp);\n  }\n\n  get signed() {\n    return this.accessToken != null;\n  }\n\n  clear() {\n    localStorage.removeItem(ACCESS_TOKEN);\n    localStorage.removeItem(LOGIN_PROVIDER);\n  }\n\n  extractTokenFromUrl() {\n    this.url = new URL(window.location.href);\n    return this.url.searchParams.get(AUTH_PARAM_NAME);\n  }\n\n  getTokenData() {\n    if (!this.accessToken) {\n      throw new Error(\"There is no access token available!\");\n    }\n\n    return jwtDecode(this.accessToken);\n  }\n\n  removeTokenFromLocation() {\n    if (!this.url.searchParams.has(AUTH_PARAM_NAME)) {\n      return;\n    }\n    this.url.searchParams.delete(AUTH_PARAM_NAME);\n    window.history.replaceState(null, \"test\", this.url.toString());\n  }\n\n  isJWTTokenValid(token) {\n    if (!token) {\n      return false;\n    }\n    try {\n      const { exp } = jwtDecode(token);\n      return exp != null;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nconst authService = new AuthService();\n\nexport { authService };\n"]}]}