{"remainingRequest":"/Users/dmitri/Documents/Новая папка/Check/node_modules/babel-loader/lib/index.js!/Users/dmitri/Documents/Новая папка/Check/node_modules/eslint-loader/index.js??ref--12-0!/Users/dmitri/Documents/Новая папка/Check/src/plugins/auth.plugin.js","dependencies":[{"path":"/Users/dmitri/Documents/Новая папка/Check/src/plugins/auth.plugin.js","mtime":1623509977027},{"path":"/Users/dmitri/Documents/Новая папка/Check/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dmitri/Documents/Новая папка/Check/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/dmitri/Documents/Новая папка/Check/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { authService } from \"@/components/services/AuthService\";\nimport store from \"@/store/store\";\nvar AuthPlugin = Object.create(null);\n\nAuthPlugin.install = function (Vue, _ref) {\n  var api = _ref.api;\n  var tokenFromUri = authService.extractTokenFromUrl();\n\n  if (authService.signed) {\n    if (authService.expired) {\n      authService.clear();\n      store.dispatch(\"auth/logout\", tokenFromUri);\n    } else {\n      console.info(\"signed user\", authService.getTokenData());\n      store.dispatch(\"auth/login\", authService.accessToken);\n      authService.removeTokenFromLocation();\n    }\n  } else {\n    if (tokenFromUri != null && authService.isJWTTokenValid(tokenFromUri)) {\n      authService.accessToken = tokenFromUri;\n      store.dispatch(\"auth/login\", tokenFromUri);\n    } else {\n      authService.clear();\n    }\n\n    authService.removeTokenFromLocation();\n  }\n\n  Vue.$authInstance = authService;\n\n  Vue.prototype.$signIn = function () {\n    var provider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"steam\";\n    location.assign(\"\".concat(api, \"/\").concat(provider));\n    authService.loginProvider = provider;\n  };\n\n  Vue.prototype.$signOut = function () {\n    authService.clear();\n    store.dispatch(\"auth/logout\");\n  };\n};\n\nexport default AuthPlugin;",{"version":3,"sources":["/Users/dmitri/Documents/Новая папка/Check/src/plugins/auth.plugin.js"],"names":["authService","store","AuthPlugin","Object","create","install","Vue","api","tokenFromUri","extractTokenFromUrl","signed","expired","clear","dispatch","console","info","getTokenData","accessToken","removeTokenFromLocation","isJWTTokenValid","$authInstance","prototype","$signIn","provider","location","assign","loginProvider","$signOut"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mCAA5B;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,IAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB;;AAEAF,UAAU,CAACG,OAAX,GAAqB,UAASC,GAAT,QAAuB;AAAA,MAAPC,GAAO,QAAPA,GAAO;AAC1C,MAAMC,YAAY,GAAGR,WAAW,CAACS,mBAAZ,EAArB;;AAEA,MAAIT,WAAW,CAACU,MAAhB,EAAwB;AACtB,QAAIV,WAAW,CAACW,OAAhB,EAAyB;AACvBX,MAAAA,WAAW,CAACY,KAAZ;AACAX,MAAAA,KAAK,CAACY,QAAN,CAAe,aAAf,EAA8BL,YAA9B;AACD,KAHD,MAGO;AACLM,MAAAA,OAAO,CAACC,IAAR,CAAa,aAAb,EAA4Bf,WAAW,CAACgB,YAAZ,EAA5B;AACAf,MAAAA,KAAK,CAACY,QAAN,CAAe,YAAf,EAA6Bb,WAAW,CAACiB,WAAzC;AACAjB,MAAAA,WAAW,CAACkB,uBAAZ;AACD;AACF,GATD,MASO;AACL,QAAIV,YAAY,IAAI,IAAhB,IAAwBR,WAAW,CAACmB,eAAZ,CAA4BX,YAA5B,CAA5B,EAAuE;AACrER,MAAAA,WAAW,CAACiB,WAAZ,GAA0BT,YAA1B;AACAP,MAAAA,KAAK,CAACY,QAAN,CAAe,YAAf,EAA6BL,YAA7B;AACD,KAHD,MAGO;AACLR,MAAAA,WAAW,CAACY,KAAZ;AACD;;AACDZ,IAAAA,WAAW,CAACkB,uBAAZ;AACD;;AAEDZ,EAAAA,GAAG,CAACc,aAAJ,GAAoBpB,WAApB;;AAEAM,EAAAA,GAAG,CAACe,SAAJ,CAAcC,OAAd,GAAwB,YAA6B;AAAA,QAApBC,QAAoB,uEAAT,OAAS;AACnDC,IAAAA,QAAQ,CAACC,MAAT,WAAmBlB,GAAnB,cAA0BgB,QAA1B;AACAvB,IAAAA,WAAW,CAAC0B,aAAZ,GAA4BH,QAA5B;AACD,GAHD;;AAKAjB,EAAAA,GAAG,CAACe,SAAJ,CAAcM,QAAd,GAAyB,YAAW;AAClC3B,IAAAA,WAAW,CAACY,KAAZ;AACAX,IAAAA,KAAK,CAACY,QAAN,CAAe,aAAf;AACD,GAHD;AAID,CAjCD;;AAmCA,eAAeX,UAAf","sourcesContent":["import { authService } from \"@/components/services/AuthService\";\nimport store from \"@/store/store\";\n\nconst AuthPlugin = Object.create(null);\n\nAuthPlugin.install = function(Vue, { api }) {\n  const tokenFromUri = authService.extractTokenFromUrl();\n\n  if (authService.signed) {\n    if (authService.expired) {\n      authService.clear();\n      store.dispatch(\"auth/logout\", tokenFromUri);\n    } else {\n      console.info(\"signed user\", authService.getTokenData());\n      store.dispatch(\"auth/login\", authService.accessToken);\n      authService.removeTokenFromLocation();\n    }\n  } else {\n    if (tokenFromUri != null && authService.isJWTTokenValid(tokenFromUri)) {\n      authService.accessToken = tokenFromUri;\n      store.dispatch(\"auth/login\", tokenFromUri);\n    } else {\n      authService.clear();\n    }\n    authService.removeTokenFromLocation();\n  }\n\n  Vue.$authInstance = authService;\n\n  Vue.prototype.$signIn = function(provider = \"steam\") {\n    location.assign(`${api}/${provider}`);\n    authService.loginProvider = provider;\n  };\n\n  Vue.prototype.$signOut = function() {\n    authService.clear();\n    store.dispatch(\"auth/logout\");\n  };\n};\n\nexport default AuthPlugin;\n"]}]}